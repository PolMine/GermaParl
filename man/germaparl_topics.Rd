% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lda.R
\name{germaparl_download_lda}
\alias{germaparl_download_lda}
\alias{topics}
\alias{germaparl_encode_lda_topics}
\alias{germaparl_load_topicmodel}
\title{Use topicmodels prepared for GermaParl.}
\usage{
germaparl_download_lda(
  k = c(100L, 150L, 175L, 200L, 225L, 250L, 275L, 300L, 350L, 400L, 450L, 500L),
  rds_file = sprintf("germaparl_lda_speeches_\%d.rds", k),
  webdir = "https://s3.eu-central-1.amazonaws.com/polmine/corpora/cwb/germaparl"
)

germaparl_encode_lda_topics(k = 200, n = 5)

germaparl_load_topicmodel(k, verbose = TRUE)
}
\arguments{
\item{k}{The number of topics of the topicmodel.}

\item{rds_file}{Filename of the RDS file}

\item{webdir}{The web location (amazon S3).}

\item{n}{Number of topics to write to corpus}

\item{verbose}{logical}
}
\description{
A set of LDA topicmodels is deposited at a Amazon S3 webspace, for a number
of topics between 100 and 500.
}
\details{
The function \code{germaparl_download_lda} will download an
  rds-file that will be stored in the \code{extdata/topicmodels/}
  subdirectory of the installed GermaParl package.

\code{germaparl_encode_lda_topics} will add a new s-attributes
  'topics' to GermaParl corpus with topicmodel for \code{k} topics. The
  \code{n} topics for speeches will be written to the corpus. A requirement
  for the function to work is that the s-attribute 'speech' has been
  generated beforehand using \code{germaparl_add_s_attribute_speech}.

\code{germaparl_load_topicmodel} will load a topicmodel into memory.
  The function will return a \code{LDA_Gibbs} topicmodel, if the topicmodel
  for \code{k} is present; \code{NULL} if the topicmodel has not yet been
  downloaded.
}
\examples{
\dontrun{
germaparl_download_lda(k = 250)
lda <- germaparl_load_topicmodel(k = 250)
lda_terms <- topicmodels::terms(lda, 50)

if (!"speech" \%in\% s_attributes("GERMAPARL")) germaparl_add_s_attribute_speech()
germaparl_encode_lda_topics(k = 250, n = 5)

library(polmineR)
use("GermaParl")
s_attributes("GERMAPARL")
sc <- corpus("GERMAPARL") \%>\%
  subset(grep("\\\\|133\\\\|", topics))
b <- as.speeches(sc, s_attribute_name = "speaker")
length(b)
}
\dontrun{
germaparl_encode_lda_topics(k = 250, n = 3)
}
}
